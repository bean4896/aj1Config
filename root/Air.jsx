/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/Air.gltf
*/

import React from 'react'
import { useEffect, useState } from 'react';
import { useGLTF } from '@react-three/drei'
import { useTexture } from '@react-three/drei'
import * as THREE from "three";
import { useCustomization } from './src/context/Customization';

const Air = (props) => {
  const { nodes, materials } = useGLTF('../models/Air.gltf');
  const { material, color } = useCustomization();
  const [useCustomMaterial, setUseCustomMaterial] = useState(true);

  if (color) {
    useEffect(() => {
      console.log("useEffect triggered with color:", color);
      // 当颜色改变时，切换到标准材质
      setUseCustomMaterial(false);
    }, [color]); // 在color改变时触发 
  }

  const leatherProps = useTexture({
    // map: '../textures/leather/Leather_008_Base Color.jpg',
    normalMap: '../textures/leather/Leather_008_Normal.jpg',
    roughnessMap: '../textures/leather/Leather_008_Roughness.jpg',
    aoMap: '../textures/leather/Leather_008_Ambient Occlusion.jpg',
  })

  const fabricProps = useTexture({
    // map: '../textures/fabric/Fabric_Knitted_006_basecolor.jpg',
    displacementMap: '../textures/fabric/Fabric_Knitted_006_height.png',
    normalMap: '../textures/fabric/Fabric_Knitted_006_normal.jpg',
    roughnessMap: '../textures/fabric/Fabric_Knitted_006_roughness.jpg',
    aoMap: '../textures/fabric/Fabric_Knitted_006_ambientOcclusion.jpg',
  })

  //leatherProps repeat
  leatherProps.normalMap.repeat.set(1, 1);
  leatherProps.roughnessMap.repeat.set(1, 1);
  leatherProps.aoMap.repeat.set(1, 1);

  //leahterProps wrap
  leatherProps.normalMap.wrapS = leatherProps.normalMap.wrapT = THREE.MirroredRepeatWrapping;
  leatherProps.roughnessMap.wrapS = leatherProps.roughnessMap.wrapT = THREE.MirroredRepeatWrapping;
  leatherProps.aoMap.wrapS = leatherProps.aoMap.wrapT = THREE.MirroredRepeatWrapping;

  //fabricProps repeat
  fabricProps.normalMap.repeat.set(3, 3);
  fabricProps.roughnessMap.repeat.set(3, 3);
  fabricProps.aoMap.repeat.set(3, 3);

  //fabricProps wrap
  fabricProps.normalMap.wrapS = fabricProps.normalMap.wrapT = THREE.MirroredRepeatWrapping;
  fabricProps.roughnessMap.wrapS = fabricProps.roughnessMap.wrapT = THREE.MirroredRepeatWrapping;
  fabricProps.aoMap.wrapS = fabricProps.aoMap.wrapT = THREE.MirroredRepeatWrapping;

  // 创建一个新的材质对象以确保颜色更新
  // const standardMaterial = new THREE.MeshStandardMaterial({ color });
  const standardMaterial = material === 'leather'
    ? new THREE.MeshStandardMaterial({ ...leatherProps, color })
    : new THREE.MeshStandardMaterial({ ...fabricProps, color });

  return (
    <group {...props} dispose={null}>

      <group position={[-0.008, 0.769, 0.665]} rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <mesh castShadow receiveShadow geometry={nodes.nikelogo.geometry} material={materials['mat_nikelogo.001']} position={[67.236, -66.482, 76.905]}>
        </mesh>

        <mesh castShadow receiveShadow geometry={nodes.top.geometry} material={materials['mat_top.001']} position={[-1.935, 10.163, -138.758]}>

        </mesh>

        <mesh castShadow receiveShadow geometry={nodes.xieBang.geometry} material={materials['mat_xieBang.001']} position={[0.78, 45.375, -26.845]}>

        </mesh>

        <mesh castShadow receiveShadow geometry={nodes.xiedai.geometry} material={materials['mat_xiedai.001']} position={[-5.082, 88.095, -78.736]} >
          <meshStandardMaterial attach="material" {...(material === 'leather'
            ? leatherProps
            : fabricProps)} color='#1e1e1e' />
        </mesh>

        <group position={[0.78, 45.375, -26.842]}>
          <mesh castShadow receiveShadow geometry={nodes.Mesh045.geometry} material={materials['mat_xiedi1.001']}>
          </mesh>

          <mesh castShadow receiveShadow geometry={nodes.Mesh045_1.geometry} material={materials['mat_xiedi2.001']}>
            <meshStandardMaterial attach="material" {...(material === 'leather'
              ? leatherProps
              : fabricProps)} color={color} />
          </mesh>
        </group>

        <mesh castShadow receiveShadow geometry={nodes.xiemian.geometry} material={materials['mat_xiemian.001']} position={[48.369, 30.527, -50.576]}>
        </mesh>

        <mesh castShadow receiveShadow geometry={nodes.xieShe.geometry} material={materials['mat_xieshe.001']} position={[0.78, 45.375, -40.846]}>
          <meshStandardMaterial attach="material" {...leatherProps} color='#FFFFFF' />
        </mesh>

        <mesh castShadow receiveShadow geometry={nodes.xieTi.geometry} position={[-0.569, -66.464, 76.905]}>
          {useCustomMaterial ? (
            // 使用自定义材质
            <primitive object={materials['mat_xieTi.001']} />
          ) : (
            // 使用标准材质
            <primitive object={standardMaterial} />
          )}
        </mesh>

      </group>

      <mesh castShadow receiveShadow geometry={nodes.line.geometry} material={materials.Lines} position={[-0.002, 0.731, 0.771]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
    </group>
  )
}

useGLTF.preload('../models/Air.gltf')
export default Air;